using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CDCatalog
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            refreshComboBoxes();
        }

        private void btnAddSong_Click(object sender, EventArgs e)
        {

            var song = new Song
            {
                ArtistId = Convert.ToInt32(comboBoxAddSongArtist.SelectedValue),
                Title = textBoxAddSongTitle.Text,
                AlbumId = Convert.ToInt32(comboBoxAddSongAlbum.SelectedValue),
                TrackNumber = Convert.ToInt32(numericUpDownAddSongTrackNumber.Value),
                GenreID = Convert.ToInt32(comboBoxAddSongGenre.SelectedValue),
                TrackLength = Convert.ToInt32(numericUpDownAddSongTrackLength.Value),
            };

            using (var context = new CDCatalogContext())
            {
                context.Database.Log = Console.WriteLine;
                context.Songs.Add(song);
                context.SaveChanges();
            }

            refreshComboBoxes();
        }

        private int GetArtistId(string p)
        {
            using (var context = new CDCatalogContext())
            {

                var artistid = context.Artists
                    .Where(a => a.Name.ToUpper() == p.ToString().ToUpper());

                //First check to see if Artist already in database

                if (artistid.Any())
                {
                    return artistid.FirstOrDefault().ID;
                }
                else
                {
                    // Artist is not in the database, Insert new artist and return ID
                    InsertNewArtist(p);

                    var artistid2 = context.Artists
                    .Where(a => a.Name.ToUpper() == p.ToString().ToUpper());

                    return artistid2.FirstOrDefault().ID;
                }

            }
        }

        private int GetGenreId(string p)
        {
            using (var context = new CDCatalogContext())
            {

                var genreID = context.Genres
                    .Where(a => a.Name.ToUpper() == p.ToString().ToUpper());

                //First check to see if Genre already in database

                if (genreID.Any())
                {
                    return genreID.FirstOrDefault().ID;
                }
                else
                {
                    // Genre is not in the database, Insert new genre and return ID
                    InsertNewGenre(p);

                    var genreID2 = context.Genres
                    .Where(a => a.Name.ToUpper() == p.ToString().ToUpper());

                    return genreID2.FirstOrDefault().ID;
                }

            }
        }

        private static void InsertNewArtist(string p)
        {
               var artist = new Artist
               {
                  Name = p
               };

                using(var context = new CDCatalogContext())
                {
                    context.Artists.Add(artist);
                    context.SaveChanges();
                }
        }

        private static void InsertNewGenre(string p)
        {
            var genre = new Genre
            {
                Name = p
            };

            using (var context = new CDCatalogContext())
            {
                context.Genres.Add(genre);
                context.SaveChanges();
            }
        }

        private static void InsertRating(int i, string t, int r)
        {
            using (var context = new CDCatalogContext())
            {
                if (t == "Song")
                {
                    Song s = (from x in context.Songs
                              where x.Id == i
                              select x).FirstOrDefault();
                    s.Rating = r;
                    context.SaveChanges();
                }

                else
                {
                    Album a = (from x in context.Albums
                              where x.Id == i
                              select x).FirstOrDefault();
                    a.Rating = r;
                    context.SaveChanges();
                }
            }
        }

        private void btnAddCD_Click(object sender, EventArgs e)
        {

            var album = new Album
            {
                ArtistId = Convert.ToInt32(comboBoxAddCDArtist.SelectedValue),
                Title = textBoxAddCDTitle.Text,
                Year = Convert.ToInt32(numericUpDownAddCDYear.Value),
            };

            using (var context = new CDCatalogContext())
            {
                context.Database.Log = Console.WriteLine;
                context.Albums.Add(album);
                context.SaveChanges();
            }

            refreshComboBoxes();
        }

        private void btnAddArtist_Click(object sender, EventArgs e)
        {
            GetArtistId(textBoxAddArtist.Text);
            refreshComboBoxes();
        }

        private void buttonAddGenre_Click(object sender, EventArgs e)
        {
            GetGenreId(textBoxAddGenre.Text);
            refreshComboBoxes();
        }

        private void buttonRate_Click(object sender, EventArgs e)
        {
            string comboBoxDisplayString = comboBoxRateSongorCD.Text;
            bool isSong = comboBoxDisplayString.Contains("Song - ");
            string comboBoxAsset;

            if (isSong == true)
            { 
                comboBoxAsset = "Song";
            }
            else{
                comboBoxAsset = "Album";
            }

            InsertRating(Convert.ToInt32(comboBoxRateSongorCD.SelectedValue), comboBoxAsset, Convert.ToInt32(numericUpDownRateSongCD.Value));
        }

        private void add(string assettype, string title, string artist)
        {
            //Array for the rows
            String[] row = {assettype, title, artist};

            ListViewItem item = new ListViewItem(row);

            //Add items
            listViewFind.Items.Add(item);
        }

        private void populateListViewFind(string keyword, string searchtype)
        {
            
            using(var context = new CDCatalogContext())
            {

                switch (searchtype)
                {

                case "Title":

                        var SongArtistList = from ta in context.Albums 
                                           join n in context.Artists on ta.ArtistId equals n.ID
                                           where (ta.Title.Contains(keyword))
                                           select new {ta};
                                           

                        var AlbumArtistList = from ts in context.Songs 
                                           join n in context.Artists on ts.ArtistId equals n.ID
                                           where (ts.Title.Contains(keyword))
                                           select new {ts};

                        //var SongCDQuery = (from c in context.Albums
                        //                   join a in context.Artists on c.ArtistId equals a.ID
                        //                   select new { c, a }).ToList();

                break;

                //case "Artist":
                //{

                //}
                //break;

                //case "Genre":
                //{

                //}
                //break;
            }

        }
        }
               

        //        var MergedSongCDlist = new List<CombinedSongsAlbums>();


        //        foreach (var item in SongCDQuery)
        //        {
        //            MergedSongCDlist.Add(new CombinedSongsAlbums()
        //            {
        //                Title = "Song - " + item.c.Title,
        //                Artist = item.a.Name,
        //                ID = item.c.Id,
        //                AssetType = "Song"
        //            });

        //        }
        //    }
        //}

        private void refreshComboBoxes()
        {
            using (var context = new CDCatalogContext())
            {
                var Artistlist = context.Artists.OrderBy(a => a.Name).ToList();
                var Genrelist = context.Genres.OrderBy(g => g.Name).ToList();
                var Songlist = context.Songs.OrderBy(s => s.Title).ToList();
                var CDlist = context.Albums.OrderBy(c => c.Title).ToList();

                var MergedSongCDlist = new List<CombinedSongsAlbums>();

                foreach (var item in Songlist)
                {
                    MergedSongCDlist.Add(new CombinedSongsAlbums()
                    {
                        Title = "Song - " + item.Title,
                        ID = item.Id,
                        AssetType = "Song"
                    });

                }

                foreach (var item in CDlist)
                {
                    MergedSongCDlist.Add(new CombinedSongsAlbums()
                    {
                        Title = "CD - " + item.Title,
                        ID = item.Id,
                        AssetType = "Album"
                    });
                }

                this.comboBoxAddCDArtist.DataSource = Artistlist;
                this.comboBoxAddCDArtist.DisplayMember = "Name";
                this.comboBoxAddCDArtist.ValueMember = "ID";

                this.comboBoxAddSongArtist.DataSource = Artistlist;
                this.comboBoxAddSongArtist.DisplayMember = "Name";
                this.comboBoxAddSongArtist.ValueMember = "ID";

                this.comboBoxAddSongAlbum.DataSource = CDlist;
                this.comboBoxAddSongAlbum.DisplayMember = "Title";
                this.comboBoxAddSongAlbum.ValueMember = "Id";

                this.comboBoxAddSongGenre.DataSource = Genrelist;
                this.comboBoxAddSongGenre.DisplayMember = "Name";
                this.comboBoxAddSongGenre.ValueMember = "ID";

                this.comboBoxRateSongorCD.DataSource = MergedSongCDlist;
                this.comboBoxRateSongorCD.DisplayMember = "Title";
                this.comboBoxRateSongorCD.ValueMember = "ID";
            }      
        }

        private void btnFind_Click(object sender, EventArgs e)
        {
            string searchtype = "";
            bool isChecked = radioButtonFindTitle.Checked;

            if (isChecked)
            {
                searchtype = "Title";
            }
            else if (radioButtonFindArtist.Checked) 
            {
                searchtype = "Artist";
            }
            else if (radioButtonFindGenre.Checked)
            {
                searchtype = "Genre";
            }
    
            populateListViewFind(textBoxFindKeywordSearch.Text, searchtype);
        }
    }
}